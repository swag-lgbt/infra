name: Tofu Plan

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize]
    paths:
      - "**/**.tf"
      - "**.hcl"
jobs:
  tofu:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      PLAN_OUTFILE: "tofu-plan"
    steps:
      # Checkout repo
      - uses: actions/checkout@v4
        name: Checkout Repository

      # Cache plugins/providers
      - uses: actions/cache@v4
        name: Use TFLint Cache
        with:
          path: ~/.tflint.d/plugins
          key: cache-tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: actions/cache@v4
        name: Use OpenTofu Cache
        with:
          path: ${{ github.workspace }}/.terraform/providers
          key: cache-tofu-${{ hashFiles('.terraform.lock.hcl') }}

      - uses: opentofu/setup-opentofu@v1
        name: Setup OpenTofu
      - uses: taiki-e/install-action@v2
        name: Install just
        with:
          tool: just
      - uses: 1password/install-cli-action@v1

      - name: OpenTofu Format
        id: fmt
        run: just tofu fmt -check -recursive -no-color
        continue-on-error: true

      - name: OpenTofu Init
        id: init
        run: just tofu init -no-color

      - name: OpenTofu Validate
        id: validate
        run: just tofu validate -no-color

      - name: TFLint
        id: lint
        run: just lint-tofu

      - name: OpenTofu Plan
        id: plan
        run: just tofu plan -no-color -out=${{ env.PLAN_OUTFILE }}
        continue-on-error: true

      - uses: actions/github-script@v7
        name: Leave Bot Comment on Pull Request
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { makePrComment } = await import('${{ github.workspace }}/scripts/tofu-pr-comment.mjs');
            await makePrComment({
              fmt:      { outcome: String.raw`${{ steps.fmt.outcome }}` },  
              init:     { outcome: String.raw`${{ steps.init.outcome }}` },
              validate: {
                outcome:  String.raw`${{ steps.validate.outcome }}`,
                stdout:   String.raw`${{ steps.validate.outputs.stdout }}`,
              },
              lint:     { outcome:  String.raw`${{ steps.lint.outcome }}` },
              plan:     {
                outcome:  String.raw`${{ steps.plan.outcome }}`,
                stdout:   String.raw`${{ steps.plan.outputs.stdout }}`
              }
            }, { github, context, core, glob, io, exec, require });

      - uses: actions/upload-artifact@v4
        name: Persist Plan
        with:
          name: tofu-plan
          path: ${{ env.PLAN_OUTFILE }}
          if-no-files-found: warn
          overwrite: true
